from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import text
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload



from db import AsyncSessionLocal
from models import User, Directory

import pandas as pd
import os

from scripts.get_position import get_position
from scripts.directions import DIRECTIONS

router = Router()

class IDState(StatesGroup):
    waiting_for_tpu_id = State()

# –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ
@router.message(F.text == "/start")
async def start_cmd(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üÜî –ó–∞–¥–∞—Ç—å —Å–≤–æ–π ID")],
            [KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def ask_info(message: Message):
    await message.answer("–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
                         "–≤ –¢–æ–º—Å–∫–∏–π –ø–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç\n\n"
                         '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π ID –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"\n\n'
                         '–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞')


@router.message(F.text == "üÜî –ó–∞–¥–∞—Ç—å —Å–≤–æ–π ID")
async def ask_tpu_id(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à TPU ID:")
    await state.set_state(IDState.waiting_for_tpu_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ TPU ID + –ø–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
@router.message(IDState.waiting_for_tpu_id)
async def save_tpu_id(message: Message, state: FSMContext):
    tpu_id = message.text.strip()
    tg_id = message.from_user.id

    await state.clear()

    session = AsyncSessionLocal()

    # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    await session.execute(
        text("DELETE FROM user WHERE tg_id = :tg_id"),
        {"tg_id": tg_id}
    )

    await session.execute(
        text("DELETE FROM directories WHERE tg_id = :tg_id"),
        {"tg_id": tg_id}
    )

    # –ò—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ CSV
    directories = []
    folder = "./scripts/tables"
    for file in os.listdir(folder):
        if file.endswith(".csv"):
            df = pd.read_csv(os.path.join(folder, file), encoding="utf-8-sig")
            if "ID" in df.columns and tpu_id in df["ID"].astype(str).values:
                directories.append(file.replace(".csv", ""))

    if not directories:
        await message.answer("‚ùó –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await session.close()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    user = User(tg_id=tg_id, tpu_id=tpu_id)
    session.add(user)
    await session.flush()

    for d in directories:
        session.add(Directory(tg_id=tg_id, directory=d))

    await session.commit()
    await session.close()

    await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {len(directories)}")

@router.message(F.text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message):
    tg_id = message.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User)
            .options(selectinload(User.directories))
            .where(User.tg_id == tg_id)
        )
        user = result.scalars().first()

        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π TPU ID")
            return

        reply_dicts = []

        for d in user.directories:
            raiting = get_position(d.directory, int(user.tpu_id))
            reply_dicts.append(raiting)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        reply_dicts.sort(key=lambda x: x.get('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', 999))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        reply_lines = [
            "\n".join(f"{key}: {value}" for key, value in r.items())
            for r in reply_dicts
        ]

        if reply_lines:
            await message.answer("\n\n".join(reply_lines))
        else:
            await message.answer("‚ö†Ô∏è –í—ã –ø–æ–∫–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ.")
